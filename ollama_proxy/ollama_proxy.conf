log_format api_logger escape=none '{"request_body": $request_body, '
                                  '"response_body": $resp_body}';

lua_need_request_body on;

server {
    listen 11434;

    location / {
        proxy_pass http://ollama:11434;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        access_log /var/log/nginx/ollama_requests.log api_logger;

        set $resp_body "";

        body_filter_by_lua_block {
            local chunk = ngx.arg[1]
            local eof = ngx.arg[2]

            -- Buffer all chunks
            ngx.ctx.buffered = (ngx.ctx.buffered or "") .. (chunk or "")

            if not eof then
                -- Don't send partial chunks yet
                ngx.arg[1] = nil
                return
            end

            -- Final chunk: clean response
            local full_response = ngx.ctx.buffered

            -- Remove all <think>...</think> blocks (case-insensitive, dot matches newline)
            local cleaned_response = ngx.re.gsub(
                full_response,
                [[\\u003cthink\b[^\\u003e]*\\u003e[\s\S]*?\\u003c/think\\u003e]],
                "",
                "ijo"
            )
            -- Set for logging and send to client
            ngx.var.resp_body = cleaned_response
            ngx.arg[1] = cleaned_response
        }
    }
}
